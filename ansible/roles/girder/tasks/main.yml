---
- name: Require girder_admin_password to be defined
  fail: msg="You did not define environment variable girder_admin_password. Example definition | -e 'pod=dev'"
  when: girder_admin_password is not defined
  tags: girder

- name: Require girder_celery_password to be defined
  fail: msg="You did not define environment variable girder_celery_password. Example definition | -e 'pod=dev'"
  when: girder_celery_password is not defined
  tags: girder

- name: install system curl
  apt: name=curl state=present
  sudo: yes
  tags: girder

- name: install pycurl package in order to use the apt_repository module
  apt: pkg=python-pycurl state=present
  sudo: yes
  tags: girder

- name: add nodejs ppa
  shell: curl -sL https://deb.nodesource.com/setup_4.x | sudo bash -
  sudo: yes
  tags: girder

- name: update apt cache
  apt: update_cache=yes
  sudo: yes
  tags: girder

- name: install package dependencies
  apt: name={{ item }} state=present
  sudo: yes
  with_items:
    - python-pip
    - python2.7-dev
    - build-essential
    - python-software-properties
    - libffi-dev
    - nodejs
    - nginx
    - cmake
    - git
    - postfix
    - libjpeg-dev
    - libfreetype6-dev
    - zlib1g-dev
    - libpng-dev
  tags:
    - girder
    - deploy-update

- name: clone girder
  git:
    repo: git://github.com/girder/girder.git
    dest: "{{ girder_root }}"
    accept_hostkey: yes
    version: "{{ girder_version }}"
  tags:
    - girder
    - deploy-update

- name: clone covalic plugin
  git:
    repo: git://github.com/girder/covalic.git
    dest: "{{ girder_root }}/plugins/covalic"
    accept_hostkey: yes
    version: "{{ covalic_version }}"
  tags:
    - girder
    - deploy-update

- name: clone challenge plugin
  git:
    repo: git://github.com/girder/challenge.git
    dest: "{{ girder_root }}/plugins/challenge"
    accept_hostkey: yes
    version: "{{ challenge_version }}"
  tags:
    - girder
    - deploy-update

- name: clone romanesco plugin
  git:
    repo: git://github.com/kitware/romanesco.git
    dest: "{{ girder_root }}/plugins/romanesco"
    accept_hostkey: yes
    version: "{{ romanesco_version }}"
  tags:
    - girder
    - deploy-update

- name: get the most recent version of pip
  pip: name=pip extra_args="-U"
  sudo: yes
  tags:
    - girder
    - deploy-update

- name: install girder core python requirements
  pip: requirements="{{ girder_root }}/requirements.txt"
  sudo: yes
  tags:
    - girder
    - deploy-update

- name: install celery pip package
  pip: name=celery version=3.1.11
  sudo: yes
  tags:
    - girder
    - deploy-update

- name: install girder-client pip package
  pip: name=girder-client version=1.1.1
  sudo: yes
  tags:
    - girder
    - deploy-update

- name: run npm install
  npm: path={{ girder_root }} production=yes
  tags:
    - girder
    - deploy-update

- name: install girder for development
  command: python setup.py develop chdir={{ girder_root }}
  sudo: yes
  tags:
    - girder
    - deploy-update

# TODO this will probably have to be reworked or at least tested for multiple mongo ips
- name: set the mongodb server ip in girder local config
  lineinfile:
    dest: /opt/covalic/girder/girder/conf/girder.local.cfg
    state: present
    regexp: 'mongodb://(.*):27017'
    line: "uri: \"mongodb://{{mongo_private_ip}}:27017/girder\""
  tags:
    - girder
    - rewire

- name: Let cherrypy know about nginx proxying
  lineinfile:
    dest: /opt/covalic/girder/girder/conf/girder.local.cfg
    state: present
    insertafter: 'global'
    regexp: 'tools.proxy.on: True'
    line: 'tools.proxy.on: True'
  tags: girder
  when: pod == 'prod'

- name: install Girder as a service
  template: src=girder.conf.j2 dest=/etc/init/girder.conf mode=644 owner=root
  sudo: yes
  tags: girder

- name: Start Girder as a service
  service: name=girder state=restarted enabled=yes
  sudo: yes
  tags:
    - girder
    - rewire

- name: add www-data to developers so nginx can serve static content
  user: name=www-data state=present groups=developers append=yes
  when: vagrant is not defined
  sudo: yes
  tags: girder

- name: disable default nginx site
  command: rm /etc/nginx/sites-enabled/default removes=/etc/nginx/sites-enabled/default
  sudo: yes
  tags: girder

- name: add the girder production nginx site
  template: src=nginx_prod.j2 dest=/etc/nginx/sites-available/girder
  sudo: yes
  when: pod == 'prod'
  tags: girder

- name: add the girder non-production nginx site
  template: src=nginx.j2 dest=/etc/nginx/sites-available/girder
  sudo: yes
  when: pod != 'prod'
  tags: girder

- name: enable girder nginx site
  command: ln -s /etc/nginx/sites-available/girder /etc/nginx/sites-enabled/girder creates=/etc/nginx/sites-enabled/girder
  sudo: yes
  tags: girder

- name: create /etc/nginx/ssl
  file: path=/etc/nginx/ssl
        owner=root
        group=root
        state=directory
        mode=0770
        recurse=no
  sudo: yes
  tags: girder
  when: pod == 'prod'

- name: copy ssl_certificate
  copy: content="{{prod_cert}}" dest=/etc/nginx/ssl/challenge_kitware_com.pem mode=640 owner=root
  sudo: yes
  tags: girder
  when: pod == 'prod'

- name: copy ssl_key
  copy: content="{{prod_key}}" dest=/etc/nginx/ssl/challenge.kitware.com.key mode=640 owner=root
  sudo: yes
  tags: girder
  when: pod == 'prod'

# force a restart of nginx to pick up any changes in girder
- name: Restart nginx service
  service: name=nginx state=restarted enabled=yes
  sudo: yes
  tags:
    - girder

- name: Ensure girder admin user exists
  girder:
    port: "{{ girder_socket_port }}"
    user:
      firstName: covalic
      lastName: admin
      password: "{{ girder_admin_password }}"
      login: "{{ girder_admin_user }}"
      email: "{{ girder_admin_email }}"
      admin: yes
    state: present
  tags: girder

- name: Ensure girder covalic scoring user exists
  girder:
    port: "{{ girder_socket_port }}"
    user:
      firstName: Scoring
      lastName: Robot
      password: "{{ girder_celery_password }}"
      login: "{{ girder_celery_user }}"
      email: "{{ girder_celery_email }}"
    state: present
  tags: girder

- name: Get ID of covalic scoring user
  girder:
    username: "{{ girder_celery_user }}"
    password: "{{ girder_celery_password }}"
    port: "{{ girder_socket_port }}"
    get:
      path: user/me
  register: covalic_scoring_user

- name: Ensure required plugins are enabled
  girder:
    port: "{{ girder_socket_port }}"
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    plugins: "{{ girder_plugins }}"
    state: present
  register: girder_admin_resp
  tags: girder

- name: Restart Girder as a service to make sure our plugins are running
  service: name=girder state=restarted enabled=yes
  sudo: yes
  tags:
    - girder
    - deploy-update
    - rewire

- name: Wait for Girder startup
  wait_for:
    port: "{{girder_socket_port}}"
    delay: 1
  tags:
    - girder
    - deploy-update
    - rewire

# Configure plugin settings

- name: Set romanesco broker
  girder:
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: romanesco.broker
        value: "amqp://guest@{{ mq_private_ip }}//"
  tags:
    - girder
    - rewire

- name: Set romanesco backend
  girder:
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: romanesco.backend
        value: "amqp://guest@{{ mq_private_ip }}//"
  tags:
    - girder
    - rewire

- name: Set config for the scoring user
  girder:
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    put:
      path: system/setting
      parameters:
        key: covalic.scoring_user_id
        value: "{{ covalic_scoring_user['gc_return']['_id'] }}"
  tags:
    - girder
    - rewire

# set up assetstore

# s3 assetsore branch

- name: Require assetstore_bucketname to be defined, proxy for all assetstore vars
  fail: msg="Environment variable assetstore_bucketname undefined, should be set up as part of an s3 assetstore definition."
  when: girder_assetstore_type == 's3' and assetstore_bucketname is not defined
  tags:
    - girder
    - girder-assetstore

- name: Set the S3 Assetstore properties
  shell: "curl -H 'Girder-Token: {{ girder_admin_resp['token'] }}' -F 'accessKeyId={{iam_assetstore_access_key_id}}' -F 'secret={{iam_assetstore_secret_access_key}}' -F 'service=s3.amazonaws.com' -F 'name={{girder_assetstore_name}}' -F 'bucket={{assetstore_bucketname}}'  -F 'type=2' http://{{girder_socket_host}}:{{girder_socket_port}}/api/v1/assetstore"
  register: assetstore_response
  when: girder_assetstore_type == 's3'
  tags:
    - girder
    - girder-assetstore

# local EBS filesystem branch

- name: Require assetstore_devicename to be defined
  fail: msg="Environment variable assetstore_devicename undefined, should be set up as part of a filesystem assetstore definition."
  when: girder_assetstore_type == 'filesystem' and assetstore_devicename is not defined and girder_assetstore_local_fs is not defined
  tags:
    - girder
    - girder-assetstore

- name: format filesystem for assetstore
  sudo: yes
  filesystem: force=no fstype=ext4 dev={{assetstore_devicename}}
  when: girder_assetstore_type == 'filesystem' and girder_assetstore_local_fs is not defined
  tags:
    - girder
    - girder-assetstore

- name: create local mountpoint
  sudo: yes
  file: dest=/opt/covalic/assetstore mode=755 owner={{girder_exec_user}} group={{girder_exec_group}} state=directory
  when: girder_assetstore_type == 'filesystem'
  tags:
    - girder
    - girder-assetstore

- name: Mount assetstore volume
  sudo: yes
  mount: name=/opt/covalic/assetstore src={{assetstore_devicename}} fstype=ext4 state=mounted opts=defaults,nofail,nobootwait dump=0 passno=2
  when: girder_assetstore_type == 'filesystem' and girder_assetstore_local_fs is not defined
  tags:
    - girder
    - girder-assetstore

- name: enforce ownership of assetstore
  sudo: yes
  file: dest=/opt/covalic/assetstore mode=755 owner={{girder_exec_user}} group={{girder_exec_group}} state=directory recurse=yes
  when: girder_assetstore_type == 'filesystem'
  tags:
    - girder
    - girder-assetstore

- name: Ensure the existence of the filesystem assetstore
  girder:
    username: "{{ girder_admin_user }}"
    password: "{{ girder_admin_password }}"
    port: "{{ girder_socket_port }}"
    assetstore:
      name: default
      type: filesystem
      root: /opt/covalic/assetstore
    state: present
  when: girder_assetstore_type == 'filesystem'
  tags:
    - girder
    - girder-assetstore

# force a restart of nginx to pick up any changes in girder
- name: Restart nginx service
  service: name=nginx state=restarted enabled=yes
  sudo: yes
  tags:
    - girder
    - deploy-update
    - rewire
